package com.fastcampus.ch2;

import java.io.UnsupportedEncodingException;
import java.net.URLEncoder;
import java.sql.Date;
import java.text.SimpleDateFormat;

import org.springframework.beans.propertyeditors.CustomDateEditor;
import org.springframework.beans.propertyeditors.StringArrayPropertyEditor;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.WebDataBinder;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.InitBinder;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;
//import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;

@Controller
@RequestMapping("/register")
public class RegisterController {
	
	
	//날짜형식으로 변환해주는 메서드 선언
	
	@InitBinder
	public void toDate(WebDataBinder binder) {
//		SimpleDateFormat df = new SimpleDateFormat("yyyy-MM-dd");
//		binder.registerCustomEditor(Date.class, new CustomDateEditor(df, false)); //스프링이제공해주는 date에디터 사용
		binder.registerCustomEditor(String[].class, new StringArrayPropertyEditor("#")); //구분자
	}
	
	
//	@RequestMapping("/register/add") //신규회원 가입은 get으로 add는 단순히 화면만 보여준다.
		@RequestMapping(value="/add", method= {RequestMethod.GET, RequestMethod.POST}) // 신규회원 가입
//		@GetMapping("/register/add") // 4.3부터 추가
		public String register() {
			return "registerForm";  // WEB-INF/views/registerForm.jsp
		}
	
	/*	src > main> webapp > web-inf > Spring > appServlet> servlet-comtext.xml에 해당 문장 추가하면 위의 내용을 적을 필요가 없다.
	 * 
	 * <view-controller path="/register/add" view-name="registerForm"/>
	 * 
	 * 이렇게 추가하면 get 요청으로만!!!
	*/
	
	
	//@RequestMapping(value = "/register/save", method = RequestMethod.POST) //포스트형식으로만 받을 수 있게 설정.
	@PostMapping("/save")
		public String save(User user,BindingResult result, Model m) throws Exception {
		System.out.println("result = " + result);
		System.out.println("user="+user);
		//1. 유효성 검사
		if(!isValid(user)) {
			String msg = URLEncoder.encode("id를 잘못입력하셨습니다.", "UTF-8");
			m.addAttribute("msg" , msg);
			return "forward:/register/add";
			//return "redirect:/register/add?msg="+msg;//재작성(rewriting)
		}
		
		//2.db에 신규회원 정보를 저장
		return "registerInfo";
	}

	private boolean isValid(User user) {
		return true;
	}
}
